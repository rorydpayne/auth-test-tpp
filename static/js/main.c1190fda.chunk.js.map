{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","loading","authenticated","state","setState","webAuth","WebAuth","domain","process","clientID","scope","responseType","redirectUri","jwksURI","overrides","__token_issuer","__jwks_uri","handleAuthParams","useCallback","console","log","queryParams","qs","parse","window","location","hash","ignoreQueryPrefix","parseHash","error","decoded","token","accessToken","access_token","checkAuth","renewAuth","result","undefined","useEffect","indexOf","id","onClick","logout","returnTo","authorize","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"8LA6GeA,EA5FqB,WAAO,IAAD,EAEZC,mBAAmB,CACzCC,SAAS,EACTC,cAAe,OAJmB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAOhCC,EAAU,IAAIC,IAAQ,CACxBC,OAAQC,8CACRC,SAAUD,gBACVE,MAAOF,+CACPG,aAAc,iBACdC,YAAaJ,6CACbK,QAAQ,WAAD,OAAaL,8CAAb,gDACPM,UAAW,CACPC,eAAe,WAAD,OAAaP,8CAAb,UACdQ,WAAW,WAAD,OAAaR,8CAAb,mDAIZS,EAAmBC,uBAAY,WACjCC,QAAQC,IAAI,uBACZ,IAAMC,EAAcC,IAAGC,MAAMC,OAAOC,SAASC,KAAM,CAACC,mBAAmB,IACvEtB,EAAQuB,WAAU,SAACC,EAA0BC,GACzC1B,EAAS,CACLF,cAAyB,OAAV2B,EACf5B,SAAS,EACT8B,MAAK,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAASE,iBAIxB5B,EAAS,CACLF,eAAe,EACfD,SAAS,EACT8B,MAAOV,EAAYY,eAEvBT,OAAOC,SAASC,KAAO,KACxB,CAACrB,EAASD,IAEP8B,EAAYhB,uBAAY,WAC1BC,QAAQC,IAAI,4BACZf,EAAQ8B,UAAU,CACdvB,YAAY,GAAD,OAAKJ,6CAAL,iBACZ,SAACqB,EAA0BO,GAC1BhC,EAAS,CACLF,eAAgB2B,EAChB5B,SAAS,EACT8B,MAASK,EAASA,EAAOJ,iBAAcK,SAGhD,CAAChC,EAASD,IAEbkC,qBAAU,WACFnC,EAAMD,gBAGNsB,OAAOC,SAASC,KAAKa,QAAQ,iBAAmB,EAChDtB,IAC+B,OAAxBd,EAAMD,eACbgC,OAEL,CAAC/B,EAAOc,EAAkBiB,IAgB7B,OAAI/B,EAAMF,QACE,2CAERE,EAAMD,cACE,6BACJ,wCACA,4BAAQsC,GAAG,SAASC,QAlBb,kBAAMpC,EAAQqC,OAAO,CAACC,SAAUnC,iDAkBvC,WACA,mCACA,4BAAQgC,GAAG,UAAUC,QAlBT,kBAAMpC,EAAQ8B,UAAU,CACxCvB,YAAY,GAAD,OAAKJ,6CAAL,iBACZ,SAACqB,EAA0BO,GAC1BhC,EAAS,CACLF,eAAgB2B,EAChB5B,SAAS,EACT8B,MAASK,EAASA,EAAOJ,iBAAcK,SAYvC,gBACA,uBAAGG,GAAG,SAAN,UAAsBrC,EAAM4B,QAG7B,4BAAQS,GAAG,QAAQC,QA1BZ,kBAAMpC,EAAQuC,cA0BrB,UC9FSC,QACW,cAA7BrB,OAAOC,SAASqB,UAEe,UAA7BtB,OAAOC,SAASqB,UAEhBtB,OAAOC,SAASqB,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDkItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACLV,QAAQU,MAAMA,EAAM+B,a","file":"static/js/main.c1190fda.chunk.js","sourcesContent":["import React, {FunctionComponent, useCallback, useEffect, useState} from 'react';\nimport {Auth0DecodedHash, Auth0Error, WebAuth} from \"auth0-js\";\nimport qs from 'qs';\n\n\ninterface AppState {\n    loading: boolean,\n    authenticated: boolean | null\n    token?: string\n}\n\ninterface AuthParams {\n    access_token?: string,\n    id_token?: string,\n    error?: string\n}\n\nconst App: FunctionComponent<any> = () => {\n\n    const [state, setState] = useState<AppState>({\n        loading: true,\n        authenticated: null\n    });\n\n    const webAuth = new WebAuth({\n        domain: process.env.REACT_APP_AUTH_DOMAIN!,\n        clientID: process.env.REACT_APP_CLIENT_ID!,\n        scope: process.env.REACT_APP_SCOPE!,\n        responseType: 'id_token token',\n        redirectUri: process.env.REACT_APP_PUBLIC_URL!,\n        jwksURI: `https://${process.env.REACT_APP_AUTH_DOMAIN}/oauth/.well-known/openid-configuration/jwks`,\n        overrides: {\n            __token_issuer: `https://${process.env.REACT_APP_AUTH_DOMAIN}/oauth`,\n            __jwks_uri: `https://${process.env.REACT_APP_AUTH_DOMAIN}/oauth/.well-known/openid-configuration/jwks`,\n        }\n    });\n\n    const handleAuthParams = useCallback(() => {\n        console.log(\"Parsing auth params\");\n        const queryParams = qs.parse(window.location.hash, {ignoreQueryPrefix: true}) as AuthParams;\n        webAuth.parseHash((error: null | Auth0Error, decoded: null | Auth0DecodedHash) => {\n            setState({\n                authenticated: error === null,\n                loading: false,\n                token: decoded?.accessToken\n            });\n        });\n\n        setState({\n            authenticated: true,\n            loading: false,\n            token: queryParams.access_token\n        });\n        window.location.hash = '';\n    }, [webAuth, setState]);\n\n    const checkAuth = useCallback(() => {\n        console.log(\"Checking user auth state\");\n        webAuth.renewAuth({\n            redirectUri: `${process.env.REACT_APP_PUBLIC_URL}/pm_cb.html`,\n        }, (error: null | Auth0Error, result: any) => {\n            setState({\n                authenticated: !error,\n                loading: false,\n                token: !!result ? result.accessToken : undefined\n            });\n        });\n    }, [webAuth, setState]);\n\n    useEffect(() => {\n        if (state.authenticated) {\n            return;\n        }\n        if (window.location.hash.indexOf(\"access_token\") >= 0) {\n            handleAuthParams();\n        } else if (state.authenticated === null) {\n            checkAuth();\n        }\n    }, [state, handleAuthParams, checkAuth]);\n\n    const login = () => webAuth.authorize();\n\n    const logout = () => webAuth.logout({returnTo: process.env.REACT_APP_PUBLIC_URL!});\n\n    const silentLogin = () => webAuth.renewAuth({\n        redirectUri: `${process.env.REACT_APP_PUBLIC_URL}/pm_cb.html`\n    }, (error: null | Auth0Error, result: any) => {\n        setState({\n            authenticated: !error,\n            loading: false,\n            token: !!result ? result.accessToken : undefined\n        });\n    });\n\n    if (state.loading) {\n        return (<div>Loading...</div>);\n    }\n    if (state.authenticated) {\n        return (<div>\n            <p>Logged In</p>\n            <button id=\"logout\" onClick={logout}>Log Out</button>\n            <span> </span>\n            <button id=\"refresh\" onClick={silentLogin}>Silent Login</button>\n            <p id=\"token\">token: {state.token}</p>\n        </div>);\n    }\n    return <button id=\"login\" onClick={login}>Login</button>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}